#!/usr/bin/env python3

import os, yaml, sys, shutil
import utils_gen_stack as utils
from prompt_toolkit import prompt
from prompt_toolkit.shortcuts import yes_no_dialog
from prompt_toolkit.shortcuts import button_dialog
from prompt_toolkit.shortcuts import input_dialog
from prompt_toolkit.shortcuts import checkboxlist_dialog

# 1. Create the aws folder if not existing
if not os.path.isdir("../aws"):
    print("The folder '../aws' does not exist.")

    ans = prompt("   Would you like to create it ? (Y/n) > ")
    if ans.lower()=="y" or ans=="":
         os.system(f"tar xf aws_template.tar -C ..")
if not os.path.isdir("../aws"):
    print("The folder '../aws' does not exist - Aborting.")
    exit()
    
# 2. Create the config file, if not existing    
if not os.path.isfile("config.yaml"):
   shutil.copyfile("orig_config.yaml", "config.yaml") 

# 3. Optionally, modify the config that creates the stack
config_path = "./config.yaml"
config_final_path = "../aws/cdk_stack/config.yaml"
config_text = open(config_path).read()
config = yaml.safe_load(config_text)
ans = button_dialog(
    title='Existing Config file',
    text= f"{config_text}\n\nWould you like to modify ?",
    buttons=[ ('Yes', "y"), ('No', "n"), ('Abort', "a") ],
).run()
if ans=="a":
    print("Aborting by user request")
    exit()
if ans=="y":
    # 3.a Modify the stack name
    stack_name = input_dialog(
        title='Modify the stack name',
        text='',
        default = f'{config["stack_name"]}'
    ).run()
    config["stack_name"] = stack_name
    yaml.safe_dump(config, open("config.yaml", 'w'))

    # 3.b Modify the list of lambdas
    new_lambda_names = input_dialog(
        title='Modify the list of Lamnbdas',
        text='"_lambda" will be added to each lambda-name.\nThe list is seprated by comma(s)',
        default = f'{",".join(config["lambda_names"])}'
    ).run()
    lambda_names = []
    for ln in new_lambda_names.split(","):
        if ln=="": continue
        lambda_names.append(ln.strip()) 
    config["lambda_names"] = lambda_names
    yaml.safe_dump(config, open("config.yaml", 'w'))

    # 3.c Modify the list of buckets
    bucket_names = config["bucket_names"]
    new_bucket_names = input_dialog(
        title='Modify the list of S3 buckets',
        text='The stack-name will be added to each bucket name.\nThe list is seprated by comma(s)',
        default = f'{",".join(config["bucket_names"])}'
    ).run()
    bucket_names = []
    for bn in new_bucket_names.split(","):
        if bn=="": continue
        bucket_names.append(bn.strip()) 
    config["bucket_names"] = bucket_names
    yaml.safe_dump(config, open("config.yaml", 'w'))

    # 3.d Modify the properties of each buckets
    for bn in bucket_names:
        on_by_default = []
        if bn in config["bucket_properties"].keys():
            existing_props = config["bucket_properties"][bn]
        else:    
            existing_props = []
        attributes = ["pre-existing"]
        for ln in lambda_names:
            attributes.append(f"Grand read-only access to the lambda {ln}")
            attributes.append(f"Grand read-write access to the lambda {ln}")
            attributes.append(f"On file drop trigger the lambda {ln}")
        for attribute in attributes:
            if attribute in existing_props:
                on_by_default.append(attribute)
        a = [ (attribute,attribute) for attribute in attributes ]
        _attributes = checkboxlist_dialog( values=a, title=f"Attributes of bucket {bn}:", text="Select the active attributes(s)",default_values=on_by_default).run()
        config["bucket_properties"][bn] = _attributes
    buckets_in_bucket_properties = list(config["bucket_properties"].keys())
    for bn in buckets_in_bucket_properties:
        if bn not in bucket_names:   # Bucket no longer exists
            del config["bucket_properties"][bn]
    yaml.safe_dump(config, open("config.yaml", 'w'))
stack = utils.get_stack()

# 4. Write the new stack

stack_path = "../aws/cdk_stack/stack.py"
if os.path.isfile(stack_path):
    ans = yes_no_dialog(
        title=f"The file '{stack_path}' already exists",
        text='Do you want to overwrite it ?').run()
if ans:
    open(stack_path, 'w').write(stack)
    print(f"Written new stack at file '{stack_path} - We are done")
else:
    print("Stack file not saved by user request")
   

